---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::LanguageExtensions
Description: Create stack for GenAI Samples Demo 


Mappings:
  ModelId2Instance:
    ai21.j1-grande:
      # Instance recommendation: https://docs.ai21.com/docs/choosing-the-right-instance-type-for-amazon-sagemaker-models#jurassic-2-ultra-formerly-jumbo-instruct
      InstanceType: ml.g5.12xlarge
    ai21.j2-ultra:
      # Instance recommendation: https://docs.ai21.com/docs/choosing-the-right-instance-type-for-amazon-sagemaker-models#jurassic-2-ultra-formerly-jumbo-instruct
      InstanceType: ml.p4d.24xlarge
    huggingface-text2text-flan-t5-xl:
      InstanceType: ml.g5.2xlarge
    huggingface-llm-falcon-7b-instruct-bf16:
      InstanceType: ml.g5.2xlarge
    model-txt2img-stabilityai-stable-diffusion-v2-1-base:
      InstanceType: ml.p3.2xlarge
    meta-textgeneration-llama-2-7b-f:
      InstanceType: ml.g5.2xlarge
      
  ModelId2Type:
    ai21.j1-grande:
      ModelType: ai21.jurassic1
    ai21.j2-ultra:
      ModelType: ai21.jurassic2
    huggingface-text2text-flan-t5-xl:
      ModelType: flan-t5
    huggingface-llm-falcon-7b-instruct-bf16:
      ModelType: falcon
    model-txt2img-stabilityai-stable-diffusion-v2-1-base:
      ModelType: stable-diffusion
    meta-textgeneration-llama-2-7b-f:
      ModelType: Meta TextGeneration Llama-2-7b-f
      
  ModelId2OpenType:
    ai21.j1-grande:
      OpenType: proprietary
    ai21.j2-ultra:
      OpenType: proprietary
    huggingface-text2text-flan-t5-xl:
      OpenType: opensource
    huggingface-llm-falcon-7b-instruct-bf16:
      OpenType: opensource
    model-txt2img-stabilityai-stable-diffusion-v2-1-base:
      OpenType: opensource
    meta-textgeneration-llama-2-7b-f:
      OpenType: opensource
      
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: Use an AMI of your choosing, we recommend to use the latest available

  # CognitoDomain:
  #   Type: String
  #   MinLength: 3
  #   MaxLength: 63
  #   AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
  #   Description: Enter a string in lowercase. Must be alpha (lowercase) numeric 3-63 in length and should not have 'cognito'.
  #   Default: genai-cog
  #   #Default: !Join [ '-', [ !Sub 'genai-cog' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
  
  AdditionalUserAttributesForSignup:
    Type: CommaDelimitedList
    Default: "dept,org"
    #AllowedPattern: ^(custom:[a-z0-9_\-]{0,61}[a-z0-9])(,(custom:[a-z_0-9\-]{0,61}[a-z0-9]))*$
    Description: Additional Attributes required during user registration with Cognito
    
  AllowedDomains:
    Type: String
    Default: EDIT_ME.com
    Description: Comma separated domain names    
  
    
  EnvPrefix:
    Type: String
    Default: env1
    Description: Unique identifier to distinguish between envs
    AllowedPattern: "^[a-z0-9]([\\-a-z0-9]*[a-z0-9])?"

  GenAICodeBootstrapBucketName:
    Type: String
    Default: "demo-squad-gen-ai-repo"
    Description: >
      S3 Bucket containing the Gen AI code samples and related artifacts for bootstrap, customizing and running the ECS containers for the sample application.
      This would be used to bootstrap and create the docker image if no public repo hosting the code samples is available/reachable.
  
    
  # GenAINeptuneLambdaCodeZip:
  #   Type: String
  #   Default: "genai_call_neptune-lambda.zip"
  #   Description: Zip containing Neptune lambda sample code.
    
  JumpStartModelEndpointId:
    Description: Endpoint for a given model id (NOP - Jumpstart wont be deployed)
    Type: String
    Default: "my-sagemaker-endpoint-1"
    AllowedPattern: "^[a-zA-Z0-9]([\\-a-zA-Z0-9]*[a-zA-Z0-9])?"

  PreferredBedrockModelType:
    Description: preferred bedrock model type
    Type: String
    Default: "bedrock claude-v2:1"
    AllowedValues:
    - "bedrock titan-text-lite"
    - "bedrock titan-text-express"
    - "bedrock claude-v2:1"
    - "bedrock claude-instant-v1"
    - "bedrock j2-ultra"
    - "bedrock j2-mid"



  BedrockModelTypes:
    Description: preferred bedrock model type - order should match with corresponding BedrockModelIds
    Type: String
    Default: 'amazon.titan,anthropic.claude-v1,anthropic.claude-instant-v1,anthropic.claude-v2,anthropic.claude-v1-100k,anthropic.claude-v2-100k,ai21.j2-ultra,ai21.j2-mid'

  BedrockModelIDs:
    Description: preferred bedrock model ids, make sure the order matches the BedrockModelTypes and without space
    Type: String
    Default: 'amazon.titan-tg1-large,anthropic.claude-v1,anthropic.claude-instant-v1,anthropic.claude-v2,anthropic.claude-v1-100k,anthropic.claude-v2-100k,ai21.j2-ultra,ai21.j2-mid'
   

  JumpStartModelId:
    Description: Jumpstart model id (only if Jumpstart is indicated as preferred over Bedrock)
    Type: String
    Default: meta-textgeneration-llama-2-7b-f #huggingface-llm-falcon-7b-instruct-bf16
    AllowedValues:
    - huggingface-llm-falcon-7b-instruct-bf16
    - huggingface-text2text-flan-t5-xl
    - ai21.j2-mid
    - ai21.j2-ultra
    - meta-textgeneration-llama-2-7b-f
    
  #  - model-txt2img-stabilityai-stable-diffusion-v2-1-base
    
  StableDiffusionDeployment:
    Type: String
    Default: NO
    Description: Deploy StableDiffusion Model (only if Jumpstart is indicated as preferred over Bedrock)
    AllowedValues:
    - YES
    - NO

  PreferenceForModelType:
    Type: String
    Default: 'BEDROCK'
    Description: Prefer Bedrock for running code samples. Deployment of Jumpstart model currently disabled.
    AllowedValues:
    - 'BEDROCK'
    #- 'JUMPSTART'


  StableDiffusionModelId:
    Description: Stable diffusion model id
    Type: String
    Default: model-txt2img-stabilityai-stable-diffusion-v2-1-base
    AllowedValues:
    - model-txt2img-stabilityai-stable-diffusion-v2-1-base

  StableDiffusionModelEndpointId:
    Description: Endpoint for a given StableDiffusion model id
    Type: String
    Default: "stable-diffusion-endpoint-1"
    AllowedPattern: "^[a-zA-Z0-9]([\\-a-zA-Z0-9]*[a-zA-Z0-9])?"

    
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port number where the service is running
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container ()1024 is 1 CPU)
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory (in MB) to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: Copies of the service task to run.

  S3BucketCleanupLambdaS3Key:
    Description: The name of the S3 Bucket Cleanup Lambda ZIP package (dont change)
    Type: String
    Default: s3-bucket-cleanup-lambda.zip
    
  SMDeployerLambdaS3Key:
    Description: The name of the Sagemaker Deployer Lambda ZIP package (dont change)
    Type: String
    Default: sagemaker-jumpstart-deployer-lambda.zip

  LexFulfillmentLambdaS3Key:
    Description: The name of the Lex fulfillment Lambda ZIP package (dont change)
    Type: String
    Default: lex-fulfillment-lambda.zip

  LexBotRagLambdaS3Key:
    Description: The name of the LexBot Rag Lambda ZIP package (dont change)
    Type: String
    Default: lexbot-rag-lambda.zip
    
  GenAIKendraEdition:
    Type: String
    Default: DEVELOPER_EDITION
    AllowedPattern: ^(DEVELOPER|ENTERPRISE)_EDITION
  
  GenAIPublicGithubRepo:
    Type: String
    # FIX ME - make sure its pointing to new public repo
    Default: "https://github.com/aws-samples/gen-ai-demos"

  LexBotName:
    Type: String
    Default: "GenAIHotelBookingLexChatbot"
    Description: Name of your Lex Bot name
  LexBotAlias:
    Type: String
    Default: "GenAIBotV1" #"beta"
    Description: Lex Bot Alias
 
  LexGenAIBotSrcZip:
    Type: String
    Default: "HotelBot-DRAFT-LexJson.zip"    
    
  DemoSquadGenAICodeSampleZip:
    Type: String
    Default: "gen-ai-code.zip"

  GenAISampleECRRepo:
    Type: String
    Default: 'gen-ai-sample-repo'
    Description: ECR Repo name hosting the Gen AI sample container images (can be edited)
  GenAISampleDockerImagePrefix:
    Type: String
    Default: 'gen-ai-sample'
    Description: ECR Repo name hosting the Gen AI sample container images (can be edited)   
  GenAISampleDockerVersion:
    Type: String
    Default: '0.1'
    Description: Default version of Gen AI sample container image (can be edited)       


Conditions:
  EnabledStableDiffusion: !Equals
    - !Ref StableDiffusionDeployment
    - YES

  DeployJumpStart: !Equals
    - !Ref PreferenceForModelType
    - 'JUMPSTART01' # FIX ME - DISABLING JUMPSTART till models are stable
        
  DeployStableDiffusion: !And 
    - !Condition EnabledStableDiffusion
    - !Condition DeployJumpStart

    
Resources:

  GenAIDemoUserGroup1:
    Type: AWS::IAM::Group
    
  GenAIDemoUser1:
    Type: AWS::IAM::User
    Properties:
      Path: /genai/
      #UserName: gen-ai-demo-user1
      Groups: 
        - !Ref GenAIDemoUserGroup1
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/AdministratorAccess"
      
  GenAIDemoUser1Credentials:
    Type: AWS::IAM::AccessKey
    Properties: 
      Status: Active
      UserName: !Ref GenAIDemoUser1

  GenAIDemoUser1CredentialsStored:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub /${EnvPrefix}/genai/credentials/${GenAIDemoUser1}
      SecretString: !Sub '{"ACCESS_KEY": "${GenAIDemoUser1Credentials}","SECRET_KEY": "${GenAIDemoUser1Credentials.SecretAccessKey}"}'
    
  GenAISMServiceRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: GenAISM-ServiceRole1
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      - arn:aws:iam::aws:policy/AmazonKendraFullAccess
      - arn:aws:iam::aws:policy/AmazonLexFullAccess
      - arn:aws:iam::aws:policy/ComprehendFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonSageMakerCanvasFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
          -
            Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action:
              - sts:AssumeRole    
          -
            Effect: Allow
            Principal:
              Service:
                - transcribe.amazonaws.com
            Action:
              - sts:AssumeRole
          -
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - sts:AssumeRole    
      # Key - Sagemaker Role needs to be a service-role
      Path: /service-role/
      Policies:
        - PolicyName: SagemakerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                Resource:
                    - !Sub "arn:aws:iam::${AWS::AccountId}:user/aws/sagemaker/*"
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:Put*"
                  - "s3:Delete*"
                  - "s3:List*"
                Resource:
                    - "arn:aws:s3:::*"
                    - "arn:aws:s3:::*/*"

              - Effect: Allow
                Action:
                  - neptune-db:Create*
                  - neptune-db:Describe*
                  - neptune-db:Delete*
                  - neptune-db:Get*
                  - neptune-db:Invoke*
                  - neptune-db:List*
                  - neptune-db:Start*
                  - neptune-db:Write*
                  - neptune-db:Read*
                  - neptune-db:connect
                  - neptune-db:Cancel*
                  - neptune-db:Manage*
                  - neptune-db:Reset*
                Resource:
                    - !Sub "arn:aws:neptune-db::${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - aws-marketplace:ViewSubscriptions
                Resource: "*"                    

              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:AttachRolePolicy
                Resource: "*"
                                
              - Effect: Allow
                Action:
                  - sagemaker:Add*
                  - sagemaker:Create*
                  - sagemaker:Describe*
                  - sagemaker:Delete*
                  - sagemaker:Get*
                  - sagemaker:Invoke*
                  - sagemaker:List*
                  - sagemaker:Start*
                  - sagemaker:Stop*
                  - sagemaker:Update*
                  - bedrock:Create*
                  - bedrock:Describe*
                  - bedrock:Delete*
                  - bedrock:Get*
                  - bedrock:Put*
                  - bedrock:Invoke*
                  - bedrock:List*
                  - bedrock:Start*
                  - bedrock:Stop*
                  - bedrock:Ret*
                  - bedrock:Update*
                  - lambda:InvokeFunction
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: "*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::custom-model/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::provisioned-model/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::model-customization-job/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::agent/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::agent-alias/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::knowledge-base/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::model-evaluation-job/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::model-invocation-job/*"
                  # - !Sub "arn:aws:bedrock:${AWS::Region}::guardrail/*"
                  # - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
                  # - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*"               
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:*"  
                Condition:
                    StringEquals:
                        "iam:PassedToService": "sagemaker.amazonaws.com"
        - PolicyName: DDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                - !GetAtt GenAIChatHistoryDynamoDBTable.Arn
                - !GetAtt GenAISelfServiceHistoryDynamoDBTable.Arn
                - !GetAtt GenAIChatStoreDynamoDBTable.Arn
                - !GetAtt LexHotelReservationsDynamoDBTable.Arn
                
  S3BucketCleanupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                
              - Effect: Allow
                Action:
                  - "s3:GetObject*"
                  - "s3:ListBucket*"
                  - "s3:DeleteObject*"
                  - "s3:GetBucket*"
                  
                Resource:
                  - "arn:aws:s3:::*"
                  - "arn:aws:s3:::*/*"

  LoggingS3BucketCleanupOnDelete:
    Type: Custom::S3BucketCleanup
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambda.Arn
      BucketName: !Ref  LoggingBucket

  LambdaArtifactsS3BucketCleanupOnDelete:
    Type: Custom::S3BucketCleanup
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambda.Arn
      BucketName: !Ref  GenAILambdaArtifactsS3Bucket

  SearchInterpreterS3BucketCleanupOnDelete:
    Type: Custom::S3BucketCleanup
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambda.Arn
      BucketName: !Ref  GenAISearchInterpreterS3Bucket

  GenAITestS3BucketCleanupOnDelete:
    Type: Custom::S3BucketCleanup
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambda.Arn
      BucketName: !Ref  GenAITestS3Bucket      


  S3BucketCleanupLambda:
    Type: AWS::Lambda::Function
    DependsOn: HelperEC2Instance
    Properties:
      Handler: s3_bucket_cleanup.lambda_handler
      Role: !GetAtt S3BucketCleanupLambdaRole.Arn
      Description: Invoke a Lambda function to cleanup S3 bucket contents.
      Runtime: python3.9
      MemorySize: 128
      Timeout: 180
      Code:
        S3Bucket: !Ref GenAILambdaArtifactsS3Bucket
        S3Key: !Ref S3BucketCleanupLambdaS3Key  
  
        

      
  
  PresignupValidationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"

  PresignupValidationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PresignupValidationLambdaRole.Arn
      Description: Invoke a Lambda function to validate email signups.
      Runtime: python3.9
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          ALLOWED_DOMAINS: !Ref AllowedDomains
      Code:
        ZipFile: |
            import os
            
            aws_region = os.environ.get('AWS_REGION')
            allowedDomains = os.environ.get('ALLOWED_DOMAINS').split(',')
            
            def lambda_handler(event, context):
            
              event['response']['autoConfirmUser'] = False
              emailAddr = event['request']['userAttributes']['email'].split('@')
              userEmailDomain = emailAddr[1]
              if userEmailDomain in allowedDomains:
                event['response']['autoConfirmUser'] = True
                return event
              
              raise Exception("Invalid email domain")



  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
      - email
      AliasAttributes: # Added additionally
      - email  
      #UserPoolName: !Sub ${CognitoDomain}-user-pool
      UserPoolName: !Join [ '-', [ !Sub 'genai-cog' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ]  , '-user-pool' ]  ] 
      #UserPoolName: !Join [ '-', [ !Sub '${CognitoDomain}' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] , '-user-pool' ]  ] 
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: dept
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: org
          AttributeDataType: String
          Mutable: true
          Required: false
#        - Name: background_color
#          AttributeDataType: String
#          Mutable: true
#          Required: false          
      # LambdaConfig:
      #   PreSignUp: !GetAtt PresignupValidationLambda.Arn

  CognitoLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PresignupValidationLambda.Arn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
  
  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      UserPoolId: !Ref UserPool 
      Identifier: 'genai-cog'
      Name: 'genai-cog'
      Scopes: 
       - ScopeName: "read" 
         ScopeDescription: "GET" 
       - ScopeName: "write"
         ScopeDescription: "POST"
         
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: UserPoolResourceServer
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true

      CallbackURLs:
        - !Join ['', [ "https://", !GetAtt GenAISamplesCFDistribution.DomainName] ] 
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - "genai-cog/read"
        - "genai-cog/write"
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      #Domain: !Ref CognitoDomain
      Domain: !Join [ '-', [ !Sub 'genai-cog' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      #Domain: !Join [ '-', [ !Sub '${CognitoDomain}' ,  !Select [0, !Split ['-',  !Select [3, !Split ['/', !Ref AWS::StackId] ]  ] ]  ]  ] 
      UserPoolId: !Ref UserPool
        
        
  GenAISamplesCFDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: gen-ai-samples-elb-origin
          DomainName: !GetAtt PublicLoadBalancer.DNSName
          CustomOriginConfig:
            HTTPPort: '8080'
            OriginProtocolPolicy: http-only
          OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: !Select [2, !Split ['/', !Ref AWS::StackId] ]
        Enabled: 'true'
        Comment: !Sub 'CloudFront distribution for GenAI samples stack ${AWS::StackName}'
        HttpVersion: http2
        #WebACLId: !GetAtt GenAISamplesWAF.Arn
        DefaultCacheBehavior: 
          TargetOriginId: gen-ai-samples-elb-origin
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3   #Managed-AllViewer
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6           #Managed-CachingOptimized
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c #Managed-SimpleCORS
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
  

  GenAISMDeployerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:ListBucket"
                Resource:
                  - "arn:aws:s3:::*"
                  - "arn:aws:s3:::*/*"
              - Effect: Allow
                Action:
                  - aws-marketplace:ViewSubscriptions
                Resource: "*"

              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:AttachRolePolicy
                Resource: "*"
                
              - Effect: Allow
                Action:
                  - sagemaker:Add*
                  - sagemaker:Create*
                  - sagemaker:Describe*
                  - sagemaker:Delete*
                  - sagemaker:Get*
                  - sagemaker:Invoke*
                  - sagemaker:List*
                  - sagemaker:Start*
                  - sagemaker:Stop*
                  - sagemaker:Update*
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*"
                
              # Key to make sure the Lambda role can pass its privileges over to Sagemaker before it can run
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:*"  
                Condition:
                    StringEquals:
                        "iam:PassedToService": "sagemaker.amazonaws.com"
                        
  SageMakerJumpStartDeployment:
    Type: Custom::SageMakerDeployment
    Condition: DeployJumpStart
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - SageMakerDeployerFunction
        - Arn
      SMDeployerRole: !Join ['/', [ 'service-role', !Ref GenAISMServiceRole] ]
      EndpointName: !Ref JumpStartModelEndpointId
      ModelId: !Ref JumpStartModelId
      ModelType:
        Fn::FindInMap:
        - ModelId2OpenType
        - Ref: JumpStartModelId
        - OpenType
      InstanceType:
        Fn::FindInMap:
        - ModelId2Instance
        - Ref: JumpStartModelId
        - InstanceType
  
  StableDiffusionJumpStartDeployment:
    Type: Custom::SageMakerDeployment
    Condition: DeployStableDiffusion
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - SageMakerDeployerFunction
        - Arn
      SMDeployerRole: !Join ['/', [ 'service-role', !Ref GenAISMServiceRole] ]
      EndpointName: !Sub "${StableDiffusionModelEndpointId}"
      ModelId: !Ref StableDiffusionModelId
      ModelType:
        Fn::FindInMap:
        - ModelId2OpenType
        - Ref: StableDiffusionModelId
        - OpenType
      InstanceType:
        Fn::FindInMap:
        - ModelId2Instance
        - Ref: StableDiffusionModelId
        - InstanceType
        
      
  SageMakerDeployerFunction:
    Type: AWS::Lambda::Function
    DependsOn: HelperEC2Instance
    Properties:
      Code:
        S3Bucket: !Ref GenAILambdaArtifactsS3Bucket
        S3Key: !Ref SMDeployerLambdaS3Key
      Handler: deployer.lambda_handler
      Role: !GetAtt GenAISMDeployerLambdaRole.Arn
      Runtime: python3.9
      MemorySize: 128
      Timeout: 900
      

  GenAILexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole      
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan                  
                Resource: 
                  - !GetAtt LexHotelReservationsDynamoDBTable.Arn
                  - !GetAtt GenAIChatHistoryDynamoDBTable.Arn
                  - !GetAtt GenAISelfServiceHistoryDynamoDBTable.Arn
                  - !GetAtt GenAIChatStoreDynamoDBTable.Arn
          
        - PolicyName: SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:                
                  - "ssm:GetParameter*"
                  - "ssm:PutParameter*"
                  - "ssm:DeleteParameter*"
                  # Secrets Manager
                  - "secretsmanager:GetSecretValue"
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: Bedrock
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:                
                  - "bedrock:*"
                Resource: 
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"


        - PolicyName: LexInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lex:PostText'
                Resource: 
                - !Sub arn:aws:lex:${AWS::Region}:${AWS::AccountId}:*
                - !Sub arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:*
                
                
  LexFulfillmentLambda:
    Type: AWS::Lambda::Function
    DependsOn: HelperEC2Instance
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref LexHotelReservationsDynamoDBTable
      FunctionName: !Sub ${AWS::StackName}-LexFulfillmentFunction
      Handler: lex_fulfillment.lambda_handler
      Role: !GetAtt GenAILexLambdaRole.Arn
      Runtime: python3.9
      Timeout: 100
      Code:
        S3Bucket: !Ref GenAILambdaArtifactsS3Bucket
        S3Key: !Ref LexFulfillmentLambdaS3Key

  LexBotRagLambda:
    Type: AWS::Lambda::Function
    DependsOn: HelperEC2Instance
    Properties:
      Environment:
        Variables:
          HOTEL_RESERVATION_TABLE: !Ref LexHotelReservationsDynamoDBTable
          KNOWLEDGEBASE_ID: 'EDIT_ME'
          query_slot: 'question'
          model_id: 'anthropic.claude-v2'
      FunctionName: !Sub ${AWS::StackName}-LexBotRagFunction
      Handler: lexbot_rag.lambda_handler
      Role: !GetAtt GenAILexLambdaRole.Arn
      Runtime: python3.9
      Timeout: 100
      Code:
        S3Bucket: !Ref GenAILambdaArtifactsS3Bucket
        S3Key: !Ref LexBotRagLambdaS3Key
        
  GenAISamplesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'GenAISamplesVPC',  !Select [2, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 


  VPCNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref GenAISamplesVPC
  InboundHTTP8080Rule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref VPCNACL
       RuleNumber: 101
       Protocol: 6
       RuleAction: allow
       Egress: "false"
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 8080
         To: 8080
  InboundHTTP443Rule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref VPCNACL
       RuleNumber: 102
       Protocol: 6
       RuleAction: allow
       Egress: "false"
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
  InboundHTTP80Rule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref VPCNACL
       RuleNumber: 103
       Protocol: 6
       RuleAction: allow
       Egress: "false"
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80         
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref VPCNACL
       RuleNumber: 101
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       


        
  GenAISamplesIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: GenAISamplesIGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: GenAISamplesVPC
      InternetGatewayId:
        Ref: GenAISamplesIGW
  GenAISamplesSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: GenAISamplesVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: GenAISamplesSubnet1
  GenAISamplesSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: GenAISamplesVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: GenAISamplesSubnet2
  GenAISamplesPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: GenAISamplesVPC
      Tags:
      - Key: Name
        Value: GenAISamplesPublicRoute
  GenAISamplesPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 
    - AttachGateway
    Properties:
      RouteTableId:
        Ref: GenAISamplesPublicRouteTable
      GatewayId:
        Ref: GenAISamplesIGW
      DestinationCidrBlock: 0.0.0.0/0
  GenAISamplesPublicSubnetRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GenAISamplesPublicRouteTable
      SubnetId:
        Ref: GenAISamplesSubnet1
  GenAISamplesPublicSubnetRouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: GenAISamplesPublicRouteTable
      SubnetId:
        Ref: GenAISamplesSubnet2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open App access
      VpcId:
        Ref: GenAISamplesVPC
      # SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: 8080
      #   ToPort: 8080
      #   CidrIp: 1.1.1.1/32
      # - IpProtocol: tcp
      #   FromPort: 22
      #   ToPort: 22
      #   CidrIp: 0.0.0.0/0       
      # - IpProtocol: tcp
      #   FromPort: 443
      #   ToPort: 443
      #   CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0      
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

      Tags:
      - Key: Name
        Value: GenAISamplesEC2SG
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open App access
      VpcId:
        Ref: GenAISamplesVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'  
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG' 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'    
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      


      
  ECRPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - "ecr:Batch*"
            - "ecr:Create*"
            - "ecr:Complete*"
            - "ecr:Describe*"
            - "ecr:Delete*"
            - "ecr:Get*"
            - "ecr:Invoke*"
            - "ecr:List*"
            - "ecr:Put*"
            - "ecr:Set*"
            - "ecr:Start*"
            - "ecr:Stop*"
            - "ecr:Up*"
            - "ecr:Init*"
            
          Resource: "*" #!Sub "arn:aws:::${AWS::AccountId}:*:*"    
      Roles:
      - Ref: S3EC2ImportRole
      
  KMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KMSDataKeyPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - "kms:Gen*"
            - "kms:Decrypt"
          Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"    
      Roles:
      - Ref: S3EC2ImportRole  

      
  S3EC2ImportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: "/"
  
  GenAISamplesS3DatasourcePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:ListBucket*
            - s3:Batch*
          Resource: 
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAITestS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAITestS3Bucket, "/*"] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAISearchInterpreterS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAISearchInterpreterS3Bucket, "/*"] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAILambdaArtifactsS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAILambdaArtifactsS3Bucket, "/*"] ]
          

  GenAISamplesS3DatasourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Ref GenAISamplesS3DatasourcePolicy
      Path: "/"
      
  GenAISamplesKendraRolePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Resource: '*'
                Condition: 
                  StringEquals: 
                    cloudwatch:namespace: "AWS/Kendra"
                
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*"  
                
              - Effect: Allow
                Action: 
                - logs:DescribeLogStreams
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*:log-stream:*"

                
  GenAISamplesKendraRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - kendra.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref GenAISamplesKendraRolePolicy
        - !Ref GenAISamplesS3DatasourcePolicy
      Path: "/"

  GenAISamplesBuilderEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3EC2ImportRole

  S3KMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Join [ '-', [ 'S3-Key',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
        Statement:
          - Effect: Allow
            Principal: 
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
            
  S3KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join [ '-', [ 'alias/genai-s3kms',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      TargetKeyId: !Ref S3KMSKey
          
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${S3KMSKeyAlias}'
            SSEAlgorithm: 'aws:kms'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: 
              - !Sub 'arn:aws:s3:::${LoggingBucket}/*'
            Condition:
              # ArnLike:
              #   'aws:SourceArn': !GetAtt 
              #     - S3Bucket
              #     - Arn
              StringEquals:
                'aws:SourceAccount': !Sub '${AWS::AccountId}'    
          - Action: "s3:*"
            Effect: "Deny"
            Principal: "*"
            Resource:  
              - !Sub 'arn:aws:s3:::${LoggingBucket}'
              - !Sub 'arn:aws:s3:::${LoggingBucket}/*'
            Condition:
              # ArnLike:
              #   'aws:SourceArn': !GetAtt 
              #     - S3Bucket
              #     - Arn
              Bool: 
                "aws:SecureTransport": "false"




  GenAILambdaArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: 
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: genailambdaartifactss3bucket-logs/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${S3KMSKeyAlias}'
            SSEAlgorithm: 'aws:kms'

  LambdaS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GenAILambdaArtifactsS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "s3:*"
            Effect: Deny
            Principal: "*"
            Resource:  
              - !Sub 'arn:aws:s3:::${GenAILambdaArtifactsS3Bucket}'
              - !Sub 'arn:aws:s3:::${GenAILambdaArtifactsS3Bucket}/*'
            Condition:
              # ArnLike:
              #   'aws:SourceArn': !GetAtt 
              #     - S3Bucket
              #     - Arn
              Bool: 
                "aws:SecureTransport": "false"
      

  GenAISearchInterpreterS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: 
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: genaisearchinterpreters3bucket-logs/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${S3KMSKeyAlias}'
            SSEAlgorithm: 'aws:kms'

  SearchInterpreterS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GenAISearchInterpreterS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "s3:*"
            Effect: Deny
            Principal: "*"
            Resource:  
              - !Sub 'arn:aws:s3:::${GenAISearchInterpreterS3Bucket}'
              - !Sub 'arn:aws:s3:::${GenAISearchInterpreterS3Bucket}/*'
            Condition:
              # ArnLike:
              #   'aws:SourceArn': !GetAtt 
              #     - S3Bucket
              #     - Arn
              Bool: 
                "aws:SecureTransport": "false"
                
  GenAITestS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: 
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: genaitests3bucket-logs/    
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${S3KMSKeyAlias}'
            SSEAlgorithm: 'aws:kms'

  TestS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GenAITestS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "s3:*"
            Effect: Deny
            Principal: "*"
            Resource:  
              - !Sub 'arn:aws:s3:::${GenAITestS3Bucket}'
              - !Sub 'arn:aws:s3:::${GenAITestS3Bucket}/*'
            Condition:
              # ArnLike:
              #   'aws:SourceArn': !GetAtt 
              #     - S3Bucket
              #     - Arn
              Bool: 
                "aws:SecureTransport": "false"
      
  
#  GenAIKendraIndex:
#    Type: AWS::Kendra::Index
#    Properties: 
#      Description: Kendra index for content search
#      Edition: !Sub "${GenAIKendraEdition}"
#      Name: !Join [ '-', [ 'GenAISamplesKendraIndex',   !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
#      RoleArn: !GetAtt GenAISamplesKendraRole.Arn

#  GenAIKendraDS:
#    Type: AWS::Kendra::DataSource
#    Properties: 
#      DataSourceConfiguration: 
#        S3Configuration:
#          BucketName: !Ref GenAISearchInterpreterS3Bucket
#          #InclusionPrefixes: [ !Sub "${GenAISampleArtifactsS3Partition}" ]
#      IndexId: !Ref GenAIKendraIndex
#      Name:  !Join [ '-', [ 'GenAIKendraDatasource',  !Select [2, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
#      RoleArn: !GetAtt GenAISamplesKendraRole.Arn
#      Type: S3

      
  HelperEC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - update
          - install
          - configure-and-build
        update:
          commands:
            update:
              command: sudo yum update -y; 
        install:
          packages:
            rpm:
              https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm: []
            yum:
              amazon-cloudwatch-agent: []
              git: []
              unzip: []
              docker: []
        configure-and-build:
          commands:
            0-clone-repo:
              command:
                Fn::Join:
                - ''
                - - AWS_DEFAULT_REGION=
                  - Ref: AWS::Region
                  - "\n"
                  - AWS_ACCOUNT_ID=
                  - Ref: AWS::AccountId
                  - "\n"
                  - GEN_AI_GITHUB_REPO=
                  - Ref: GenAIPublicGithubRepo
                  - "\n"
                  - GEN_AI_S3_BUCKET=
                  - Ref: GenAICodeBootstrapBucketName
                  - "\n"
                  - GEN_AI_CODE_SAMPLE_ZIP=
                  - Ref: DemoSquadGenAICodeSampleZip
                  - "\n"
                  - GEN_AI_LOG_BUCKET=
                  - Ref: LoggingBucket
                  - "\n"
                  - GEN_AI_SAMPLES_ARTIFACTS_TARGET_BUCKET=
                  - Ref: GenAITestS3Bucket
                  - "\n"
                  - GEN_AI_KENDRA_SAMPLES_TARGET_BUCKET=
                  - Ref: GenAISearchInterpreterS3Bucket
                  - "\n"
                  - GEN_AI_LEXBOT_TARGET_BUCKET=
                  - Ref: LexGenAIBotBucket
                  - "\n"
                  - GEN_AI_LEXBOT_SAMPLE_ZIP=
                  - Ref: LexGenAIBotSrcZip
                  - "\n"                  
                  - GEN_AI_LEXBOT_LAMBDA_SAMPLE_ZIP=
                  - Ref: LexFulfillmentLambdaS3Key
                  - "\n"
                  - GEN_AI_LEXBOT_RAG_LAMBDA_SAMPLE_ZIP=
                  - Ref: LexBotRagLambdaS3Key
                  - "\n"
                  
                  # - GEN_AI_NEPTUNE_LAMBDA_SAMPLE_ZIP=
                  # - Ref: GenAINeptuneLambdaCodeZip
                  # - "\n"
                  - GEN_AI_S3_BUCKET_CLEANUP_LAMBDA_SAMPLE_ZIP=
                  - Ref: S3BucketCleanupLambdaS3Key
                  - "\n"
                  - GEN_AI_SM_DEPLOYER_LAMBDA_SAMPLE_ZIP=
                  - Ref: SMDeployerLambdaS3Key
                  - "\n"
                  - GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET=
                  - Ref: GenAILambdaArtifactsS3Bucket
                  - "\n"
                  - | 
                      export DEBUG_LABEL=`date "+%Y-%m-%d-%H-%M"` 
                      
                      export DEBUG_LOG_PATH="debuglogs-repos-${DEBUG_LABEL}" ;
                      export DEBUG_DIR="/tmp/${DEBUG_LOG_PATH}" ;
                      mkdir ${DEBUG_DIR};                
                  - |
                  
                      export DEBUG_LABEL=`date "+%Y-%m-%d-%H-%M"` 
                      
                      export DEBUG_LOG_PATH="debuglogs-repos-${DEBUG_LABEL}" ;
                      export DEBUG_DIR="/tmp/${DEBUG_LOG_PATH}" ;
                      mkdir ${DEBUG_DIR};                
                  - |
                  
                      sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel zlib-devel;
                      cd /tmp;
                      wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz;
                      tar -xvf Python-3.9.6.tgz;
                      cd Python-3.9.6;
                      ./configure --enable-optimizations;
                      sudo make altinstall;
                      python3.9 --version;
                      echo "Installed Python3.9 on EC2" > ${DEBUG_DIR}/python3.9_installed.txt;
                      aws s3 cp  ${DEBUG_DIR}/python3.9_installed.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      
                      cd /tmp
                      wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip;
                      unzip aws-sam-cli-linux-x86_64.zip -d sam-install;
                      ./sam-install/install --update; export PATH=/usr/local/bin:$PATH;
                      echo "Installed SAM on EC2" > ${DEBUG_DIR}/sam_installed.txt;
                      aws s3 cp  ${DEBUG_DIR}/sam_installed.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;

                      curl $GEN_AI_GITHUB_REPO >& /tmp/repo_found_result.txt
                      repo_404=`grep -i "error: 404" /tmp/repo_found_result.txt `;
                      repo_not_reachable=`grep -i "could not resolve"  /tmp/repo_found_result.txt `;
                      repo_not_found_count=`grep -ci "not found"  /tmp/repo_found_result.txt `;
                      if [[ "$repo_not_found_count" == "1" || "$repo_404" != "" || "$repo_not_reachable" != "" ]]; then
                        echo "Error!! Provided Repo: $GEN_AI_GITHUB_REPO neither found nor reachable/resolvable, proceeding with S3 bucket" >> ${DEBUG_DIR}/repo_reach.txt; 
                        aws s3 cp ${DEBUG_DIR}/repo_reach.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;

                      
                        cd /home/ec2-user; 
                        aws s3 cp "s3://${GEN_AI_S3_BUCKET}/${GEN_AI_CODE_SAMPLE_ZIP}" /home/ec2-user/ 2> ${DEBUG_DIR}/s3_copy_codezip.txt;
                        aws s3 cp  ${DEBUG_DIR}/s3_copy_codezip.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                        
                        cd /home/ec2-user; mkdir gen-ai-extract; cd ./gen-ai-extract; unzip /home/ec2-user/${GEN_AI_CODE_SAMPLE_ZIP}  |& tee ${DEBUG_DIR}/zipfilelist.txt;  
                        echo "Unzipped files list..." >> ${DEBUG_DIR}/zipfilelist.txt; 
                        aws s3 cp ${DEBUG_DIR}/zipfilelist.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                        
                        # Create a link so code base can be referred the same way for both github and zip file extract.
                        ln -s /home/ec2-user/gen-ai-extract /home/ec2-user/gen-ai;

                        mkdir /home/ec2-user/tmp-samples-folder;
                        cp -r sample-artifacts/* /home/ec2-user/tmp-samples-folder/;
                        
                        export LAMBDA_SRCS=/home/ec2-user/gen-ai-extract/lambda-srcs;
                        export LEX_BOT_SRC=/home/ec2-user/gen-ai-extract/lex-srcs;
   
                      else
                        echo "Provided Repo: $GEN_AI_GITHUB_REPO found reachable/resolvable, proceeding with Git clone" >> ${DEBUG_DIR}/repo_reach.txt; 
                        aws s3 cp ${DEBUG_DIR}/repo_reach.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                        
                        cd /home/ec2-user;
                        
                        git clone $GEN_AI_GITHUB_REPO gen_ai_samples;
                        # Create a link so code base can be referred the same way for both github and zip file extract.
                        ln -s /home/ec2-user/gen_ai_samples /home/ec2-user/gen-ai;

                        cd gen_ai_samples;
                        export LAMBDA_SRCS=/home/ec2-user/gen_ai_samples/lambda-srcs;
                        export LEX_BOT_SRC=/home/ec2-user/gen_ai_samples/lex-srcs;
   
                        mkdir /home/ec2-user/tmp-samples-folder;
                        cp -r sample-artifacts/* /home/ec2-user/tmp-samples-folder/;
                        
                      fi;

                      pushd "${LAMBDA_SRCS}/sagemaker-deployer-function";
                      sam build; sam package --s3-bucket "${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" --region $AWS_DEFAULT_REGION > sagemaker-deployer-sam-package-output.txt;
                      sagemaker_deployer_artifact=`grep CodeUri sagemaker-deployer-sam-package-output.txt | awk '{print $NF}' `;
                      aws s3 cp "${sagemaker_deployer_artifact}" "s3://${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}/${GEN_AI_SM_DEPLOYER_LAMBDA_SAMPLE_ZIP}";
                      echo "Built and copied over Sagemaker Deployer lambda zip ${GEN_AI_SM_DEPLOYER_LAMBDA_SAMPLE_ZIP} into the lambda folder ${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" > ${DEBUG_DIR}/lambda_file_copies.txt;  
                      popd;
                      
                      pushd "${LAMBDA_SRCS}/s3-bucket-cleanup-function";
                      sam build; sam package --s3-bucket "${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" --region $AWS_DEFAULT_REGION > s3bucketcleanup-sam-package-output.txt;
                      s3bucketcleanup_artifact=`grep CodeUri s3bucketcleanup-sam-package-output.txt | awk '{print $NF}' `;
                      aws s3 cp "${s3bucketcleanup_artifact}" "s3://${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}/${GEN_AI_S3_BUCKET_CLEANUP_LAMBDA_SAMPLE_ZIP}";
                      echo "Built and copied over S3 Bucket Cleanup lambda zip ${GEN_AI_S3_BUCKET_CLEANUP_LAMBDA_SAMPLE_ZIP} into the lambda folder ${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" >> ${DEBUG_DIR}/lambda_file_copies.txt;  
                      popd;
                      
                      pushd "${LAMBDA_SRCS}/lex-fulfillment-function";
                      sam build; sam package --s3-bucket "${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" --region $AWS_DEFAULT_REGION > lexfulfillment-sam-package-output.txt;
                      lexfulfillment_artifact=`grep CodeUri lexfulfillment-sam-package-output.txt | awk '{print $NF}' `;
                      aws s3 cp "${lexfulfillment_artifact}" "s3://${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}/${GEN_AI_LEXBOT_LAMBDA_SAMPLE_ZIP}";
                      echo "Built and copied over Lex Fulfillment lambda zip ${GEN_AI_LEXBOT_LAMBDA_SAMPLE_ZIP} into the lambda folder ${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" >> ${DEBUG_DIR}/lambda_file_copies.txt;  
                      popd;
                      
                      pushd "${LAMBDA_SRCS}/lex-rag-lambda-function";
                      sam build; sam package --s3-bucket "${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" --region $AWS_DEFAULT_REGION > lexbot-rag-sam-package-output.txt;
                      lexbotraglambda_artifact=`grep CodeUri lexbot-rag-sam-package-output.txt | awk '{print $NF}' `;
                      aws s3 cp "${lexbotraglambda_artifact}" "s3://${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}/${GEN_AI_LEXBOT_RAG_LAMBDA_SAMPLE_ZIP}";
                      echo "Built and copied over LexBot Rag lambda zip ${GEN_AI_LEXBOT_RAG_LAMBDA_SAMPLE_ZIP} into the lambda folder ${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" >> ${DEBUG_DIR}/lambda_file_copies.txt;  
                      popd;
                      
                      
                      echo "Copied over lambda zips into the lambda folder ${GEN_AI_LAMBDA_ARTIFACTS_S3_BUCKET}" >> ${DEBUG_DIR}/lambda_file_copies.txt;  
                      aws s3 cp ${DEBUG_DIR}/lambda_file_copies.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      cd /home/ec2-user;

                      pushd "${LEX_BOT_SRC}";
                      zip -r  /home/ec2-user/${GEN_AI_LEXBOT_SAMPLE_ZIP} .;
                      aws s3 cp "/home/ec2-user/${GEN_AI_LEXBOT_SAMPLE_ZIP}" "s3://${GEN_AI_LEXBOT_TARGET_BUCKET}";
                      echo "Built and copied over Lex Bot zip ${GEN_AI_LEXBOT_SAMPLE_ZIP} into the S3 Bucket ${GEN_AI_LEXBOT_TARGET_BUCKET}" > ${DEBUG_DIR}/lex_bot_file_copies.txt;  
                      popd;
                      

                      pushd  /home/ec2-user/tmp-samples-folder/;
                      for subdir in `ls`; do aws s3 sync $subdir s3://${GEN_AI_SAMPLES_ARTIFACTS_TARGET_BUCKET}/$subdir; 
                      echo "Done copying contents of $subdir over to s3 sample artifacts bucket: ${GEN_AI_SAMPLES_ARTIFACTS_TARGET_BUCKET}" >> ${DEBUG_DIR}/s3_copy_samplezip.txt; done;
                      
                      cd content-analyzer-samples;
                      for searchFile in `ls`; do aws s3 cp $searchFile s3://${GEN_AI_KENDRA_SAMPLES_TARGET_BUCKET}/; 
                      echo "Done copying $searchFile over to s3 kendra bucket: ${GEN_AI_KENDRA_SAMPLES_TARGET_BUCKET}" >>  ${DEBUG_DIR}/s3_copy_samplezip.txt; done;
                      popd;
                      aws s3 cp ${DEBUG_DIR}/s3_copy_samplezip.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                                        
            1-create-and-save-container:
              command:
                Fn::Join:
                - ''
                - - AWS_DEFAULT_REGION=
                  - Ref: AWS::Region
                  - "\n"
                  - AWS_ACCOUNT_ID=
                  - Ref: AWS::AccountId
                  - "\n"
                  - GEN_AI_S3_BUCKET=
                  - Ref: GenAICodeBootstrapBucketName
                  - "\n"
                  - GEN_AI_LOG_BUCKET=
                  - Ref: LoggingBucket
                  - "\n"
                  - GEN_AI_SAMPLE_ECR_REPO=
                  - Ref: GenAISampleECRRepo
                  - "\n"
                  - GEN_AI_SAMPLE_DOCKER_PREFIX=
                  - Ref: GenAISampleDockerImagePrefix
                  - "\n"
                  - STACK_ID=
                  - Ref: AWS::StackId
                  - "\n"
                  - GEN_AI_SAMPLE_DOCKER_VERSION=
                  - Ref: GenAISampleDockerVersion
                  - "\n"
                  - |
                      sudo usermod -a -G docker ec2-user; id ec2-user; newgrp docker; 
                      sudo systemctl enable docker.service; 
                      sudo systemctl start docker.service; 
                      sudo systemctl status docker.service; 
                    
                  - | 
                      export DEBUG_LABEL=`date "+%Y-%m-%d-%H-%M"` 
                      
                      export DEBUG_LOG_PATH="debuglogs-containers-${DEBUG_LABEL}" ;
                      export DEBUG_DIR="/tmp/${DEBUG_LOG_PATH}" ;
                      mkdir ${DEBUG_DIR};
                      
                      cd /home/ec2-user/gen-ai;
                      
                      ls -R /home/ec2-user/gen-ai |& tee ${DEBUG_DIR}/list-files-step.txt; 
                      echo "New files after unzip under gen-ai dir..." >> ${DEBUG_DIR}/list-files-step.txt;  
                      aws s3 cp ${DEBUG_DIR}/list-files-step.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                    
                  - |
                      #export STACK_SUBSET_ID=`echo $STACK_ID | awk -F "/"  '{print $NF}'  |  awk -F "-" '{print $4}' `; 
                      export STACK_SUBSET_ID=`echo $STACK_ID | cut -d '/' -f 3 | cut -d '-' -f 4 `;
                      export GEN_AI_SAMPLE_DOCKER_IMAGE=${GEN_AI_SAMPLE_DOCKER_PREFIX}-${STACK_SUBSET_ID};
                      cd /home/ec2-user/gen-ai; docker build -t "${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION}" -f ./Dockerfile . |& tee ${DEBUG_DIR}/step1.txt ; 
                      echo "Built docker image... ${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION}" >> ${DEBUG_DIR}/step1.txt ;  
                      aws s3 cp ${DEBUG_DIR}/step1.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                    
                  - |
                      registry_status=`aws ecr describe-repositories --repository-names  ${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} --region ${AWS_DEFAULT_REGION} |& tee repo-search1.txt  `; 
                      if [[ "$registry_status" =~ "does not exist" ]]; then  
                        aws ecr create-repository --repository-name ${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} --region ${AWS_DEFAULT_REGION} |& tee ${DEBUG_DIR}/step2.txt; 
                        echo "Created docker repo...  ${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} " >> ${DEBUG_DIR}/step2.txt ; 
                      else 
                        echo "Already existing docker repo...  ${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} " >> ${DEBUG_DIR}/step2.txt ; 
                      fi ; 
                      aws ecr describe-repositories --repository-names  ${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} --region ${AWS_DEFAULT_REGION} |& tee ${DEBUG_DIR}/repo-search2.txt; 
                      
                      aws s3 cp ${DEBUG_DIR}/repo-search1.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/";
                      aws s3 cp ${DEBUG_DIR}/repo-search2.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/";
                      aws s3 cp ${DEBUG_DIR}/step2.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;  
                      
                      docker tag ${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION}  ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION} |& tee ${DEBUG_DIR}/step3.txt ;
                      echo "Tagged docker image... ${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION} to  ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION} " >> ${DEBUG_DIR}/step3.txt ;  
                      aws s3 cp ${DEBUG_DIR}/step3.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      
                      aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE} |& tee ${DEBUG_DIR}/step4.txt;
                      echo "Logged into ecr for ... ${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION}" >> ${DEBUG_DIR}/step4.txt ;  
                      aws s3 cp ${DEBUG_DIR}/step4.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/";
                      
                      docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${GEN_AI_SAMPLE_ECR_REPO}/${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION} |& tee step5.txt; 
                      echo "Pushed docker image... ${GEN_AI_SAMPLE_DOCKER_IMAGE}:${GEN_AI_SAMPLE_DOCKER_VERSION}" >> ${DEBUG_DIR}/step5.txt ;  
                      
                      aws s3 cp ${DEBUG_DIR}/step5.txt "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      sudo aws s3 cp /var/log/cfn-init.log "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      sudo aws s3 cp /var/log/cloud-init-output.log "s3://${GEN_AI_LOG_BUCKET}/${DEBUG_LOG_PATH}/" ;
                      echo "Completed with Docker image creation and S3 bucket copying";
                    
    Properties:
      InstanceType: t3.small
      ImageId:
        Ref: LatestAmiId
      SubnetId:
        Ref: GenAISamplesSubnet1
      SecurityGroupIds:
      - Ref: EC2SecurityGroup
      IamInstanceProfile:
        Ref: GenAISamplesBuilderEC2InstanceProfile
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'sudo yum install -y aws-cfn-bootstrap

              '
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource HelperEC2Instance "
            - "         --region "
            - Ref: AWS::Region
            - "         --configsets default"
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $?"
            - " --stack "
            - Ref: AWS::StackName
            - " --resource HelperEC2Instance"
            - " --region "
            - Ref: AWS::Region
            - "\n"
      Tags:
      - Key: Name
        Value: GenAISamplesEC2
        
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '-', [ 'GenAISample',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      RetentionInDays: 7
  
  GenAISamplesECSTaskExecutionRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
            - Effect: Allow
              Action:
                # ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
              Resource: 
                - "*"
            - Effect: Allow
              Action:
                # CW
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # SSM
                - "ssm:GetParameter*"
                - "ssm:PutParameter*"
                - "ssm:DeleteParameter*"
                # Secrets Manager
                - "secretsmanager:GetSecretValue"
                # KMS
                - "kms:Decrypt"
                # Sagemaker
                - "sagemaker:Add*"
                - "sagemaker:Create*"
                - "sagemaker:Describe*"
                - "sagemaker:Delete*"
                - "sagemaker:Get*"
                - "sagemaker:Invoke*"
                - "sagemaker:List*"
                - "sagemaker:Start*"
                - "sagemaker:Stop*"
                - "sagemaker:Update*"
              Resource: 
                - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*"
                - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
                

  CustomECSFargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Ref GenAISamplesECSTaskExecutionRolePolicy
        - !Ref GenAISamplesS3DatasourcePolicy


  JumpStartModelWaitHandle: 
    Condition: DeployJumpStart
    DependsOn: SageMakerJumpStartDeployment
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitHandle: 
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition: 
    Type: "AWS::CloudFormation::WaitCondition"
    Properties: 
      Handle: !If [ DeployJumpStart, !Ref JumpStartModelWaitHandle, !Ref WaitHandle ]
      Timeout: "600"
      Count: 0
      
  #Task definition and container definitions          
  GenAISamplesTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
    - HelperEC2Instance
    - WaitCondition
    - UserPoolDomain
    Properties:
      Family: !Join [ '-', [ 'GenAISamplesTask',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      #ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      ExecutionRoleArn: !GetAtt CustomECSFargateTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Join [ '-', [ 'GenAISamples' ,  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Join [ ':', [ !Join [ '/', [ !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com" , !Ref GenAISampleECRRepo, !Join [ '-', [ !Ref  GenAISampleDockerImagePrefix ,  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ]    ] ], !Ref GenAISampleDockerVersion ] ]
          Secrets:
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvPrefix}/genai/credentials/${GenAIDemoUser1}:ACCESS_KEY::"
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvPrefix}/genai/credentials/${GenAIDemoUser1}:SECRET_KEY::"  
              
          Environment:
            - Name: STACK_ID
              Value: !Select [2, !Split ['/', !Ref AWS::StackId]] 
            - Name: AWS_DEFAULT_REGION
              Value: !Ref 'AWS::Region'
            - Name: CONTAINER_PORT
              Value: !Ref 'ContainerPort'
            - Name: BEDROCK_TITAN_PAYLOAD_LIMIT
              Value: '20000'

            - Name: POOL_DOMAIN_NAME
              #Value: !Ref CognitoDomain
              Value: !Join [ '-', [ !Sub 'genai-cog' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ]  ]  ] 
              #Value: !Join [ '-', [ !Sub '${CognitoDomain}' ,  !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ]  ]  ] 
            - Name: POOL_ID
              Value: !Ref UserPool 
            - Name: APP_CLIENT_ID
              Value: !Ref UserPoolClient
            - Name: APP_CLIENT_SECRET
              Value:
                Fn::GetAtt:
                  - UserPoolClient
                  - ClientSecret
            - Name: COGNITO_CUSTOM_READ_PROFILE
              Value: 'genai-cog/read'

            - Name: COGNITO_CUSTOM_WRITE_PROFILE
              Value: 'genai-cog/write'
            - Name: CF_DISTRIBUTION
              Value: !GetAtt GenAISamplesCFDistribution.DomainName
            
            - Name: ALLOWED_DOMAINS
              Value: !Ref AllowedDomains
            
            - Name: COGNITO_USERPOOL_CUSTOM_ATTRIBUTES_LIST
              Value: !Join [ ",", !Ref AdditionalUserAttributesForSignup ]
              
            - Name: genai_chat_history
              Value: !Ref GenAIChatHistoryDynamoDBTable
            - Name: genai_selfservice_history
              Value: !Ref GenAISelfServiceHistoryDynamoDBTable
            - Name: genai_chat_store
              Value: !Ref GenAIChatStoreDynamoDBTable
            
            - Name: im_endpoint_name
              Value: !Ref StableDiffusionModelEndpointId
            - Name: tx_endpoint_name
              Value: !Ref JumpStartModelEndpointId
            - Name: fsi_index_id
              Value: '' #!GetAtt GenAIKendraIndex.Id
            - Name: legal_index_id
              Value: '' #!GetAtt GenAIKendraIndex.Id
            # - Name: GEN_AI_NEPTUNE_LAMBDA
            #   Value: !Ref GenAINeptuneHandlerLambda
            - Name: bucket
              Value: !Ref GenAITestS3Bucket
            - Name: genai_test_bucket
              Value: !Ref GenAITestS3Bucket  
            - Name: genai_demo_portal_assets
              Value: !Ref GenAISearchInterpreterS3Bucket
            - Name: IAM_ROLE
              Value: !Join ['', [ 'arn:aws:iam::', !Sub "${AWS::AccountId}", ':role/service-role/', !Ref GenAISMServiceRole] ]
            - Name: falcon_endpoint_name
              Value: ''
            - Name: br_endpoint_name
              Value: ''
            - Name: travel_index_id
              Value: '' #!GetAtt GenAIKendraIndex.Id # EDIT ME
            - Name: campaign_arn
              Value: ''
            - Name: flan_endpoint_name
              Value: !Ref JumpStartModelEndpointId 
            - Name: energy_index_id
              Value: '' #!GetAtt GenAIKendraIndex.Id # EDIT ME
            - Name: ls_index_id
              Value:  '' #!GetAtt GenAIKendraIndex.Id # EDIT ME
              
            - Name: PREFER_MODEL_FAMILY
              Value: !Ref PreferenceForModelType
            - Name: CFN_INSTALL
              Value: True

            - Name: PREFERRED_JUMPSTART_MODEL_ID
              Value: !Ref JumpStartModelId
            - Name: PREFERRED_JUMPSTART_MODEL_TYPE
              Value: !FindInMap [ ModelId2Type, !Ref JumpStartModelId, ModelType ]
            - Name: JUMPSTART_MODEL_IDS
              #Value: !Ref JumpStartModelIds 
              Value: !Ref JumpStartModelId
              
            - Name: JUMPSTART_MODEL_ENDPOINT
              Value: !Ref JumpStartModelEndpointId 
            
            - !If 
              - 'DeployJumpStart'
              - Name: JUMPSTART_MODEL_ENDPOINT_ARN
                Value: !GetAtt SageMakerJumpStartDeployment.PhysicalResourceId 
              - Name: JUMPSTART_MODEL_ENDPOINT_ARN
                Value: None                 
            
            - !If 
              - 'DeployStableDiffusion'
              - Name: STABLEDIFFUSION_MODEL_ENDPOINT_ARN
                Value: !GetAtt StableDiffusionJumpStartDeployment.PhysicalResourceId 
              - Name: STABLEDIFFUSION_MODEL_ENDPOINT_ARN
                Value: None                 

            - Name: falcon_endpoint_name # Going with falcon as default jumpstart endpoint
              Value: !Ref JumpStartModelEndpointId 
              
            - Name: PREFERRED_BEDROCK_MODEL_TYPE
              Value: !Ref PreferredBedrockModelType
            - Name: BEDROCK_MODEL_TYPES
              Value: !Ref BedrockModelTypes
            - Name: BEDROCK_MODEL_IDS
              Value: !Ref BedrockModelIDs    
    
            # - Name: ant_name
            #   Value:  '{{resolve:secretsmanager:/${EnvPrefix}/genai/credentials/anthropickeys:SecretString:ANT_API_KEY_NAME}}' 
            # - Name: ant_api_key
            #   Value: '{{resolve:secretsmanager:/${EnvPrefix}/genai/credentials/anthropickeys:SecretString:ANT_API_KEY_VALUE}}' 
            # - Name: AWS_ACCESS_KEY_ID
            #   Value: !Sub '{{resolve:secretsmanager:/${EnvPrefix}/genai/credentials/${GenAIDemoUser1}:SecretString:ACCESS_KEY}}' 
            # - Name: AWS_SECRET_ACCESS_KEY
            #   Value: !Sub '{{resolve:secretsmanager:/${EnvPrefix}/genai/credentials/${GenAIDemoUser1}:SecretString:SECRET_KEY}}'  

          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: gen-ai-sample-ecs-task

  # ECS Cluster
  GenAISamplesECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ '-', [ 'GenAISamplesECSCluster',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      
  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - PublicLoadBalancerListenerHTTP
    Properties:
      ServiceName: !Join [ '-', [ 'GenAISamplesECSService',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      Cluster: !Ref GenAISamplesECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref GenAISamplesSubnet1
            - !Ref GenAISamplesSubnet2
                
      TaskDefinition: !Ref GenAISamplesTaskDefinition
      LoadBalancers:
        - ContainerName:  !Join [ '-', [ 'GenAISamples' ,  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'


  GenAINeptuneHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"

  # GenAINeptuneHandlerLambda:
  #   DependsOn: HelperEC2Instance
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: lambda_function.lambda_handler
  #     Role: !GetAtt GenAINeptuneHandlerLambdaRole.Arn
  #     Runtime: python3.9
  #     MemorySize: 512
  #     Timeout: 300
  #     Environment:
  #       Variables:
  #         #neptuneEndpoint: !Ref NeptuneEndpoint
  #         neptunePort: '8182'
  #     Code:
  #       S3Bucket: !Ref GenAILambdaArtifactsS3Bucket
  #       S3Key: !Ref GenAINeptuneLambdaCodeZip

  GenAIChatHistoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: !Join [ '-', [ 'genai-chat-history',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: genai-chat-history

  GenAISelfServiceHistoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: !Join [ '-', [ 'genai-selfservice-history',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ]  
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: turn
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: turn
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: genai-selfservice-history
          
  GenAIChatStoreDynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: !Join [ '-', [ 'genai-chat-store',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session
          AttributeType: S
      KeySchema:
        - AttributeName: session
          KeyType: HASH
      Tags:
        - Key: Name
          Value: genai-chat-store

  LexHotelReservationsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: !Join [ '-', [ 'lex-hotel-reservations',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ReservationNr
          AttributeType: S
        - AttributeName: City
          AttributeType: S          
        # - AttributeName: NumberOfNights
        #   AttributeType: N  
        # - AttributeName: NumberOfGuests
        #   AttributeType: N  
        # - AttributeName: RoomType
        #   AttributeType: S  
        # - AttributeName: CheckInDate
        #   AttributeType: S
        # - AttributeName: FirstName
        #   AttributeType: S
        # - AttributeName: LastName
        #   AttributeType: S
        # - AttributeName: ResStatus
        #   AttributeType: S
        # - AttributeName: ResDate
        #   AttributeType: S          
      KeySchema:
        - AttributeName: ReservationNr
          KeyType: HASH
        - AttributeName: City
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: lex-hotel-reservations


  GenAIDDBRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:ListTables
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
          - !GetAtt GenAIChatHistoryDynamoDBTable.Arn
          - !GetAtt GenAISelfServiceHistoryDynamoDBTable.Arn
          - !GetAtt GenAIChatStoreDynamoDBTable.Arn
          - !GetAtt LexHotelReservationsDynamoDBTable.Arn
                
  #Target group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /_stcore/health
      Matcher:
        HttpCode: 200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [ 'GenAISamples', 'TargetGroup',  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId: !Ref GenAISamplesVPC

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref GenAISamplesVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: 8080
          FromPort: 8080
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
               

  PublicLoadBalancer:
    DependsOn: GenAISamplesPublicRoute 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: 'true'

      Subnets:
        - !Ref GenAISamplesSubnet1
        - !Ref GenAISamplesSubnet2
      SecurityGroups: [!GetAtt PublicLoadBalancerSG.GroupId ]
      
  # Create rules to forward HTTP Traffic to the target group
  # HTTPRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - TargetGroupArn: !Ref 'TargetGroup'
  #         Type: 'forward'
  #     Conditions:
  #       - Field: path-pattern
  #         Values: ['*']
  #     ListenerArn:
  #       Fn::ImportValue:
  #         !Join [':', ['GenAISamples', 'PublicListenerHTTP']]
  #     Priority: 1
  # HTTPSRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - TargetGroupArn: !Ref 'TargetGroup'
  #         Type: 'forward'
  #     Conditions:
  #       - Field: path-pattern
  #         Values: ['*']
  #     ListenerArn:
  #       Fn::ImportValue:
  #         !Join [':', ['GenAISamples', 'PublicListenerHTTPS']]
  #     Priority: 1
  PublicLoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig: 
            ContentType: 'text/plain'
            MessageBody: 'Unauthorized access!! Access Denied!'
            StatusCode: '401'
          Type: fixed-response
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 8080
      Protocol: HTTP

  # Commenting off HTTPS for now.. as it requires SSL cert and domain association
  # PublicLoadBalancerListenerHTTPS:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   DependsOn:
  #     - PublicLoadBalancer
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: 'forward'
  #     LoadBalancerArn: !Ref 'PublicLoadBalancer'
  #     Port: 443
  #     Protocol: HTTPS
  

  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
            - !Select [2, !Split ['/', !Ref AWS::StackId] ]  
      ListenerArn: !Ref PublicLoadBalancerListenerHTTP
      Priority: 1

  EC2TerminationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: Ec2ShutdownPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                - ec2:StopInstances
                - ec2:TerminateInstances
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
      
                
  EC2TerminationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt EC2TerminationLambdaRole.Arn
      Description: Invoke a Lambda function to terminate ec2 instances.
      Runtime: python3.9
      MemorySize: 128
      Timeout: 900
      Code:
        ZipFile: |
            import json
            import boto3
            from pprint import pprint
            import os
            import urllib3
            
            aws_region = os.environ.get('AWS_REGION')
            ec2 = boto3.client('ec2', region_name=aws_region)
            
            
            def generate_physical_resource_id(event, context):
                aws_account_id = context.invoked_function_arn.split(":")[4]
            
                props = event['ResourceProperties']
                instanceid = props['EC2InstanceIds'][0]
                
            
                return f'arn:aws:test:{aws_region}:{aws_account_id}:ec2/{instanceid}'
                
            def lambda_handler(event, context):
                #pprint(dict(os.environ), width = 1)
                print('Incoming event for ec2 shutdown: ',event)
                instances = event['ResourceProperties']['EC2InstanceIds']
                ec2.terminate_instances(InstanceIds=instances)
                print('stopped your instances: ' + str(instances))
                sendResponse(event, context, 'SUCCESS', 'Termination Complete!!')
            
            def sendResponse(event, context, responseStatus, responseData):
            
                responseBody = {
                    'Status': responseStatus,
                    'StackId': event['StackId'],
                    'RequestId': event['RequestId'],
                    'LogicalResourceId': event['LogicalResourceId'],
                    'PhysicalResourceId': generate_physical_resource_id(event, context),
                    'Data': { 'message': responseData }
                }
            
                if ('FAILED' == responseStatus):
                    responseBody['Reason'] = responseData
                    del responseBody['Data']
            
                print("RESPONSE BODY:\n", responseBody)
            
                json_response_body = json.dumps(responseBody)
                print("SENDING RESPONSE.. {} to {} ".format(json_response_body, event['ResponseURL']))
            
                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_response_body))
                }
            
                try:
                    http = urllib3.PoolManager()
                    response = http.request('PUT', event['ResponseURL'], headers=headers, body=json_response_body)
                    print("Status code:", response.status)
            
                except Exception as e:
                    print("send(..) failed executing http.request(..):", e)
            


  EC2CleanupViaLambda:
    Type: Custom::LambdaInvoker
    Version: "1.0"
    DependsOn: ECSService
    Properties:
      ServiceToken: !GetAtt EC2TerminationLambda.Arn
      EC2InstanceIds: [ !Ref HelperEC2Instance ]
      
  # Lex Chat bot related resources

  LexGenAIBotBucket:
    Type: AWS::S3::Bucket
   
  S3BotImportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonLexFullAccess
      Path: "/"
                
  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:ListBucket*
          Resource: 
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAICodeBootstrapBucketName ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAICodeBootstrapBucketName, "/*"] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAILambdaArtifactsS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAILambdaArtifactsS3Bucket, "/*"] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAITestS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAITestS3Bucket, "/*"] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref LoggingBucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref LoggingBucket, "/*"] ] 
          - !Join [ '', ["arn:aws:s3:::", !Ref LexGenAIBotBucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref LexGenAIBotBucket, "/*"] ] 
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAISearchInterpreterS3Bucket ] ]
          - !Join [ '', ["arn:aws:s3:::", !Ref GenAISearchInterpreterS3Bucket, "/*"] ]
          
          
      Roles:
      - Ref: S3EC2ImportRole
      - Ref: S3BotImportRole
      

 
  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonLexFullAccess   
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "comprehend:DetectSentiment"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/*"
              - Effect: Allow
                Action:
                  - "bedrock:Retrieve"
                Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"

                 # FIX ME
               
 
  LexGenAIBot:
    Type: AWS::Lex::Bot
    DependsOn: HelperEC2Instance
    Properties:
      AutoBuildBotLocales: false
      BotFileS3Location:
        S3Bucket: !Ref LexGenAIBotBucket 
        S3ObjectKey: !Ref LexGenAIBotSrcZip
      BotLocales:
        - LocaleId: "en_US"
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: "Ivy"
      DataPrivacy:
        ChildDirected: false
      Description: String
      IdleSessionTTLInSeconds: 300
      Name: !Join [ '-', [ !Ref LexBotName,  !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ] ]  ] 
      
      RoleArn: !GetAtt BotRuntimeRole.Arn
 
  LexGenAIBotVersion:
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref LexGenAIBot
      BotVersionLocaleSpecification:
        - LocaleId: "en_US"
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: LexGenAIBot Version
 
  LexGenAIBotAlias:
    Type: AWS::Lex::BotAlias
    DependsOn: LexGenAIBotVersion
    Properties:
      BotId: !Ref LexGenAIBot
      BotAliasName: !Ref LexBotAlias
      BotVersion: 1
      SentimentAnalysisSettings:
        DetectSentiment: true
      BotAliasLocaleSettings:
        - BotAliasLocaleSetting:
            CodeHookSpecification:
              LambdaCodeHook:
                CodeHookInterfaceVersion: "1.0"
                #LambdaArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:LexSleepFunction" # FIX ME
                LambdaArn: !GetAtt LexBotRagLambda.Arn
            Enabled: true
          LocaleId: en_US
         
  LexBotInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LexBotRagLambda.Arn
      Principal: "lexv2.amazonaws.com"
      SourceArn:
        !Join
        - '/'
        - - !Sub arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot-alias
          - !Ref LexGenAIBot
          - '*'
     
Outputs:

  GenAICodeBootstrapBucket:
    Value: !Ref GenAICodeBootstrapBucketName
    Description: >
      S3 Bucket containing the Gen AI code samples and related artifacts for bootstrap, customizing and running the ECS containers for the sample application.
      This would be used to bootstrap and create the docker image if no public repo hosting the code samples is available/reachable.
    
  GenAITestS3Bucket:
    Value: !Ref GenAITestS3Bucket
    Description: S3 Bucket for storing the various results (image/voice/text) of testing the use cases
  
  GenAISearchInterpreterS3Bucket:  
    Value: !Ref GenAISearchInterpreterS3Bucket
    Description: >
      S3 Bucket containing the example inputs for search interpreter use case.
      Extract and upload the documents into the same S3 bucket and then sync the preconfigured Kendra index against its S3Datasource (configured to read from this bucket) 

#  KendraIndex:
#    Value: !Ref GenAIKendraIndex
#    Description: Kendra index for ingesting samples from S3 datasource
    
  StableDiffusionEndpoint:
    Description: Jumpstart StableDiffusion Endpoint
    Value: !If 
            - 'DeployStableDiffusion'
            - !Ref StableDiffusionModelEndpointId
            - None      
  JumpstartSagemakerEndpoint:
    Description: Jumpstart Sagemaker Endpoint
    Value: !If 
            - 'DeployJumpStart'
            - !Ref JumpStartModelEndpointId
            - None      
    
  VpcId:
    Value: !Ref GenAISamplesVPC
    Description: VPC ID for the GenAISamplesVPC

  ECSCluster:
    Value: !Ref GenAISamplesECSCluster
    Description: ECS Cluster name hosting the container running the streamlit application
    
  ECSService:
    Value: !GetAtt ECSService.Name
    Description: ECS Service name hosting the container running the streamlit application

  LBRSecureTokenHeader:
    Value: !Select [2, !Split ['/', !Ref AWS::StackId] ] 
    Description: Token required for communicating with LoadBalancer directly (with 'X-Custom-Header' )
    
  PublicGenAILoadBalancerEndpoint:
    Value: !Join ['', [ "http://", !GetAtt PublicLoadBalancer.DNSName, ':8080'] ]
    Description: Public loadbalancer endpoint
  
  FullStackId:
    Value: !Sub "${AWS::StackId}"
    Description: Stack Id
    
  ResourcesSuffixId:
    Value: !Select [3, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ]
    Description: Unique identifier associated with resources
    
  DockerCreationDebugLogsS3Bucket:
    Description: S3 bucket where debug logs for docker container creation gets stored (under debuglogs-*)
    Value: !Ref GenAITestS3Bucket
    
  # DockerUpdateCommand:
  #   Description: Update docker image with new code base (run from directory that has the latest code)
  #   Value: !Join [ "\n", [
  #         "#!/bin/sh ",
  #         "echo 'Run following commands from directory that has the code and Dockerfile. Needs Docker and aws cli';",
  #         !Sub "export AWS_DEFAULT_REGION=${AWS::Region}; ",
  #         !Sub "export AWS_ACCOUNT_ID=${AWS::AccountId} ; ",
  #         !Sub "export STACK_ID=${AWS::StackId} ; ",
  #         !Sub "export GEN_AI_SAMPLE_ECR_REPO=${GenAISampleECRRepo} ; ",
  #         !Sub "export GEN_AI_SAMPLE_DOCKER_VERSION=${GenAISampleDockerVersion} ; ",
  #         !Sub "export SUFFIX_ID=`echo $STACK_ID | cut -d '/' -f 3 | cut -d '-' -f 4 ` ;",
  #         !Sub "export GEN_AI_SAMPLE_DOCKER_IMAGE=${GenAISampleDockerImagePrefix}-${!SUFFIX_ID} ;" ,
  #         "export REPO_ID=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$GEN_AI_SAMPLE_ECR_REPO/$GEN_AI_SAMPLE_DOCKER_IMAGE ; ",
  #         "docker build -t $GEN_AI_SAMPLE_DOCKER_IMAGE:$GEN_AI_SAMPLE_DOCKER_VERSION . ;",
  #         "docker tag $GEN_AI_SAMPLE_DOCKER_IMAGE:$GEN_AI_SAMPLE_DOCKER_VERSION  $REPO_ID:$GEN_AI_SAMPLE_DOCKER_VERSION;",
  #         "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPO_ID;",
  #         "docker push $REPO_ID:$GEN_AI_SAMPLE_DOCKER_VERSION ;"
  #         ] ]
       
  # ECSUpdateCommand:
  #   Value: !Sub "aws ecs update-service --region ${AWS::Region} --cluster ${GenAISamplesECSCluster} --service ${ECSService.Name} --force-new-deployment --query 'service'.'serviceName' "
  #   Description: 'Command to update ECS Service to uptake new task definitions/container images'
    
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  
  HostedUILoginURL:
    Value: !Join [ '-', [ !Sub 'genai-cog' , !Select [0, !Split ['-',  !Select [2, !Split ['/', !Ref AWS::StackId] ]  ] ]  , !Sub '.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=https://${GenAISamplesCFDistribution.DomainName}' ] ]
    #Value: !Sub https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=https://${GenAISamplesCFDistribution.DomainName}
    Description: The Cognito Hosted UI URL    
    
  PublicGenAILoadBalancerDNS:
    Value: !GetAtt PublicLoadBalancer.DNSName 
    Description: Public loadbalancer DNS

  PublicSecureCFDistribution:
    Value: !Join ['', [ "https://", !GetAtt GenAISamplesCFDistribution.DomainName] ] 
    Description: Public CloudFront distribution endpoint
  
  
  

